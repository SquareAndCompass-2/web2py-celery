timestamp: 2011-08-05T17:06:33.339399
CREATE TABLE celery_taskmeta(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    task_id CHAR(255) UNIQUE,
    status CHAR(50),
    result TEXT,
    date_done TIMESTAMP,
    traceback TEXT
);
success!
timestamp: 2011-08-05T17:06:33.346343
CREATE TABLE celery_tasksetmeta(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    taskset_id CHAR(255) UNIQUE,
    result TEXT,
    date_done TIMESTAMP
);
success!
timestamp: 2011-08-05T17:06:33.350724
CREATE TABLE celery_intervalschedule(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    every INTEGER NOT NULL,
    period CHAR(24)
);
success!
timestamp: 2011-08-05T17:06:33.361444
CREATE TABLE celery_crontabschedule(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    minute CHAR(64),
    hour CHAR(64),
    day_of_week CHAR(64)
);
success!
timestamp: 2011-08-05T17:06:33.378215
CREATE TABLE celery_periodictasks(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    last_update TIMESTAMP NOT NULL
);
success!
timestamp: 2011-08-05T17:06:33.394425
CREATE TABLE celery_periodictask(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name CHAR(200) UNIQUE,
    task CHAR(200) UNIQUE,
    interval INTEGER REFERENCES celery_intervalschedule(id) ON DELETE CASCADE,
    crontab INTEGER REFERENCES celery_crontabschedule(id) ON DELETE CASCADE,
    args TEXT,
    kwargs TEXT,
    queue CHAR(200),
    exchange CHAR(200),
    routing_key CHAR(200),
    expires TIMESTAMP,
    enabled CHAR(1),
    last_run_at TIMESTAMP,
    total_runs_count INTEGER,
    date_changed TIMESTAMP
);
success!
timestamp: 2011-08-05T17:06:33.408900
CREATE TABLE celery_workerstate(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    hostname CHAR(255) UNIQUE,
    last_heartbeat TIMESTAMP
);
success!
timestamp: 2011-08-05T17:06:33.417790
CREATE TABLE celery_taskstate(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    state CHAR(64),
    task_id CHAR(512) UNIQUE,
    name CHAR(200),
    tstamp TIMESTAMP,
    args TEXT,
    kwargs TEXT,
    eta TIMESTAMP,
    expires TIMESTAMP,
    result TEXT,
    traceback TEXT,
    running_time DOUBLE,
    retries INTEGER,
    worker INTEGER REFERENCES celery_workerstate(id) ON DELETE CASCADE,
    hidden CHAR(1)
);
success!
